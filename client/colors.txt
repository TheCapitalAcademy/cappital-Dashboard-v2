background-image: linear-gradient(273deg,#ffa336 -.09%,#ff36c7 29.66%,#8c45ff 72.55%,#2e9bff 107.89%);
background-image: linear-gradient(147deg,#3864ff 18.76%,#a660ff 79.27%);
ff:Noto Sans SC


import { closeSnackbar, useSnackbar } from 'notistack';
const { enqueueSnackbar } = useSnackbar();
const showCenteredSnackbar = (message, variant) => {
		enqueueSnackbar(message, {
			variant: variant,
			autoHideDuration: 2200,
			anchorOrigin: {
				vertical: 'top',
				horizontal: 'center',
			},
			action: (
				<IconButton size="small" aria-label="close" color="inherit" onClick={() => closeSnackbar()}>
					<Close fontSize="small" />
				</IconButton>
			)
		});
	};



  const handleLogout = async () => {
        try {
            const res = await axios.get('/api/auth/logout');
            localStorage.removeItem('user');
            dispatch(logout());
            enqueueSnackbar("you are logged out", { variant: "warning" });
            window.location.reload();
        } catch (error) {
        }
    }




linear-gradient(to right, rgb(191, 219, 254), rgb(245, 208, 254))s


LOGICAL DEDUCTION logical deduction


const Routes = () => {
  const dispatch = useDispatch();
  const [isAuthenticated, setIsAuthenticated] = useState(false);

  const { enqueueSnackbar } = useSnackbar();
  const showCenteredSnackbar = (message, variant) => {
    enqueueSnackbar(message, {
      variant: variant,
      autoHideDuration: 3000,
      anchorOrigin: {
        vertical: 'top',
        horizontal: 'center',
      },
      action: (
        <IconButton size="small" aria-label="close" color="inherit" onClick={() => closeSnackbar()}>
          <Close fontSize="small" />
        </IconButton>
      )
    });
  };

  useEffect(() => {
    const fetchUser = async () => {
      try {
        const res = await axios.get('/api/userinfo');
        if (res.data.user) {
          setIsAuthenticated(true)
        }
      } catch (error) {
        setIsAuthenticated(false)

      }
    }
    fetchUser()
  }, [])
  const handleLogout = async () => {
    try {
      const res = await axios.get('/api/auth/logout');
      localStorage.removeItem('user');
      dispatch(logout());
      showCenteredSnackbar("Session Expire Login Again", "warning");
    } catch (error) {
    }
  }

  const adminPasswordRef = useRef(null);

  // Lazyloader custom function 
  const LazyLoader = ({ children }) => (
    // <Suspense fallback={<CircularProgress style={{ marginLeft: "20px" }} />}>
    <Suspense fallback={<div className='custom-loader'></div>}>
      {children}
    </Suspense>
  );

  const handleAdminPasswordSubmit = async (e) => {
    e.preventDefault();
    const enteredPassword = adminPasswordRef.current.value;
    try {
      const res = await axios.get('/api/admin');
      if (enteredPassword === res?.data?.password) {
        setIsAdminAuthenticated(true);
      } else {
        alert("Incorrect password. Please try again.");
      }
    } catch (error) {
      if (enteredPassword === 'admin123') {
        setIsAdminAuthenticated(true);
      } else {
        alert("Something went wrong or incorrect password. Please try again.");
      }
    }
  };

  const ProtectedRoute = ({ children }) => {
    if (!isAuthenticated) {
      handleLogout()
      return <Navigate to="/signin" />
    }
    return children;
  };

  const AdminProtectedRoute = ({ children }) => {
    if (!isAdminAuthenticated) {
      return (
        <>
          <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center', height: '100vh' }}>
            <form onSubmit={handleAdminPasswordSubmit} style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
              <TextField
                type="password"
                label="Admin Password"
                inputRef={adminPasswordRef}
                variant="outlined"
                style={{ marginBottom: '10px' }}
              />
              <Button type="submit" variant="contained" color="primary">
                Submit
              </Button>
            </form>
          </div>
        </>
      );
    }
    return children;
  };




  // Main routes object
  const router = createBrowserRouter([
    {
      path: "/",
      element: <Home />,
      exact: true
    },
    {
      path: "/about",
      element: <About />,
    },
    {
      path: "/contact",
      element: <Contact />,
    },
    {
      path: "/mcq",
      element: <ProtectedRoute><LazyLoader><Mcq /></LazyLoader></ProtectedRoute>,
    },
    {
      path: "/calculator",
      element: <Aggerate />,
    },
    {
      path: "/signup",
      element: <Signup />,
    },
    {
      path: "/signin",
      element: <SignIn />,
    },
    {
      path: "/checkout",
      element: <Checkout />,
      children: [
        {
          path: "payment",
          element: <div>test</div>
        }
      ]
    },
    {
      path: "/forgot-password",
      element: <Forgot />,
    },
    {
      path: "/forgot-password/:token",
      element: <SetPassword />,
    },


    // ---------------Dashboard page routes----------------
    {
      path: "/dashboard",
      element: <ProtectedRoute><LazyLoader><DashboardLayout /></LazyLoader></ProtectedRoute>,
      children: [
        {
          path: "",
          element: <LazyLoader><SelectSubject /></LazyLoader>,
        },
        {
          path: "subject/:subject",
          element: <LazyLoader><SubjectPage /></LazyLoader>,
        },
        {
          path: "subject/:subject/:chapter",
          element: <LazyLoader><Chapters /></LazyLoader>,
        },
        {
          path: "subject/:subject/:chapter/:name",
          element: <LazyLoader><Topic /></LazyLoader>,
        },
        {
          path: "stats",
          element: <LazyLoader><AppView /></LazyLoader>,
        },
        {
          path: "saved-mcqs",
          element: <>saved mcqs</>,
        },
        {
          path: "calculator",
          element: <LazyLoader><Calculator /></LazyLoader>,
        },
        {
          path: "profile",
          element: <LazyLoader><Profile /></LazyLoader>,
        },
      ],
    },


    // ---------------Admin page routes----------------
    {
      path: "/admin",
      element: <AdminProtectedRoute><LazyLoader><AdminHome /></LazyLoader></AdminProtectedRoute>,
      children: [
        {
          path: "", // path relative to "/admin"
          element: <LazyLoader><Dashboard /></LazyLoader>,
        },
        {
          path: "review",
          element: <LazyLoader><Reviews /></LazyLoader>,
        },
        {
          path: "topbar",
          element: <LazyLoader><Topbar /></LazyLoader>,
        },
        {
          path: "courses",
          element: <LazyLoader><Courses /></LazyLoader>,
        },
        {
          path: "referral",
          element: <LazyLoader><RefCode /></LazyLoader>,
        },
        {
          path: "course-request",
          element: <LazyLoader><CoursePayRequest /></LazyLoader>,
        },
        {
          path: "add-mcq",
          element: <LazyLoader><McqAdmin /></LazyLoader>
        },
        {
          path: "view-mcq",
          element: <LazyLoader><McqView /></LazyLoader>
        },
        {
          path: "report-mcq",
          element: <LazyLoader><ReportMcq /></LazyLoader>
        },
        {
          path: "settings",
          element: <LazyLoader><Settings /></LazyLoader>
        }
      ],
    },
    // --------------Page not found route----------------
    {
      path: "*",
      element: <ErrorPage />,
    },
  ]);

  // Provider for router 
  return (
    <RouterProvider router={router} />
  );
}


 const [isAdminAuthenticated, setIsAdminAuthenticated] = useState(false);
